from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.helpers import escape_markdown
import sqlite3

# Configura√ß√£o inicial do banco de dados
conn = sqlite3.connect('bot_data.db', check_same_thread=False)
cursor = conn.cursor()

# Criar tabela caso n√£o exista
cursor.execute('''
CREATE TABLE IF NOT EXISTS media (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    media_type TEXT,
    media_file_id TEXT,
    status TEXT DEFAULT 'pending',
    rejection_reason TEXT
)
''')
conn.commit()

# IDs fixos
ADMIN_ID = 6460184219
GROUP_ID = -1002424564273
BOT_USERNAME = "Anonimas175_bot"  # Substituir pelo username do seu bot (sem @)

# Fun√ß√£o para dar boas-vindas
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = (
        "üëã *Bem-vindo!*\n\n"
        "üìã *Como funciona:*\n"
        "1Ô∏è‚É£ Envie uma √∫nica m√≠dia (foto ou v√≠deo) por vez.\n"
        "2Ô∏è‚É£ A m√≠dia ser√° analisada por um administrador.\n"
        "3Ô∏è‚É£ Ap√≥s aprova√ß√£o, ser√° enviada ao grupo.\n\n"
        "üîí *Todos os envios s√£o 100% an√¥nimos!* Ningu√©m saber√° quem enviou a m√≠dia.\n\n"
    )
    escaped_message = escape_markdown(welcome_message, version=2)
    await update.message.reply_text(escaped_message, parse_mode="MarkdownV2")

# Receber m√≠dias enviadas pelo usu√°rio
async def receber_midia(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    username = update.message.from_user.username or "Usu√°rio sem username"
    first_name = update.message.from_user.first_name or "Usu√°rio sem nome"

    # Verificar se √© foto ou v√≠deo
    if update.message.photo:
        media_type = "photo"
        media_file_id = update.message.photo[-1].file_id
    elif update.message.video:
        media_type = "video"
        media_file_id = update.message.video.file_id
    else:
        await update.message.reply_text("Por favor, envie uma foto ou v√≠deo v√°lido.")
        return

    # Salvar a m√≠dia no banco de dados
    cursor.execute(
        "INSERT INTO media (user_id, username, media_type, media_file_id) VALUES (?, ?, ?, ?)",
        (user_id, username, media_type, media_file_id),
    )
    conn.commit()
    media_id = cursor.lastrowid

    # Enviar informa√ß√µes ao administrador, incluindo o nome de usu√°rio e o primeiro nome
    await context.bot.send_message(
        ADMIN_ID,
        text=(f"üì© *Nova m√≠dia recebida para an√°lise (envio an√¥nimo):*\n\n"
              f"üîë *UserID:* `{user_id}`\n"
              f"üë§ *Username:* @{username}\n"
              f"üìù *Nome:* {first_name}\n"
              f"üÜî *M√≠dia ID:* `{media_id}`\n"
              "‚ö†Ô∏è *Envio an√¥nimo: Ningu√©m saber√° quem enviou.*"),
        parse_mode="Markdown",
    )

    # Criar bot√µes de aprova√ß√£o/reprova√ß√£o
    buttons = [
        [
            InlineKeyboardButton("‚úÖ Aprovar", callback_data=f"aprovar_{media_id}"),
            InlineKeyboardButton("‚ùå Reprovar", callback_data=f"reprovar_{media_id}")
        ]
    ]

    # Enviar a m√≠dia para o administrador
    if media_type == "photo":
        await context.bot.send_photo(
            ADMIN_ID,
            media_file_id,
            caption=f"üì∑ *Foto enviada para an√°lise*\n\nüÜî *M√≠dia ID:* `{media_id}`\n‚ö†Ô∏è *Envio An√¥nimo*",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    elif media_type == "video":
        await context.bot.send_video(
            ADMIN_ID,
            media_file_id,
            caption=f"üé• *V√≠deo enviado para an√°lise*\n\nüÜî *M√≠dia ID:* `{media_id}`\n‚ö†Ô∏è *Envio An√¥nimo*",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(buttons),
        )

    # Informar ao usu√°rio que a m√≠dia foi enviada
    await update.message.reply_text("Sua m√≠dia foi enviada para an√°lise. O envio √© an√¥nimo e ningu√©m saber√° quem a enviou.")

# Callback para aprovar ou reprovar m√≠dias
async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    if data.startswith("aprovar_"):
        media_id = int(data.split("_")[1])
        cursor.execute("SELECT user_id, media_file_id, media_type FROM media WHERE id = ?", (media_id,))
        media = cursor.fetchone()

        if media:
            user_id, media_file_id, media_type = media

            # Enviar a m√≠dia para o grupo
            if media_type == "photo":
                await context.bot.send_photo(GROUP_ID, media_file_id, caption=f"üì∑ #envioan√¥nimo \n @{BOT_USERNAME}")
            elif media_type == "video":
                await context.bot.send_video(GROUP_ID, media_file_id, caption=f"üé• #envioan√¥nimo \n @{BOT_USERNAME}")

            # Atualizar status no banco de dados
            cursor.execute("UPDATE media SET status = 'approved' WHERE id = ?", (media_id,))
            conn.commit()

            # Informar ao administrador
            await query.message.reply_text("‚úÖ Aprovado: A m√≠dia foi enviada ao grupo.")

            # Notificar o usu√°rio
            await context.bot.send_message(
                user_id,
                "‚úÖ Sua m√≠dia foi aprovada e enviada ao grupo. O envio foi an√¥nimo e ningu√©m saber√° quem a enviou."
            )

    elif data.startswith("reprovar_"):
        media_id = int(data.split("_")[1])

        # Salvar no contexto para aguardar o motivo
        context.user_data["awaiting_reason"] = media_id

        # Solicitar o motivo da reprova√ß√£o
        await query.message.reply_text("‚ùå Por favor, envie o motivo da reprova√ß√£o como uma mensagem de texto.")

# Receber o motivo da reprova√ß√£o
async def receber_motivo_reprovacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    media_id = context.user_data.get("awaiting_reason")

    if media_id:
        motivo = update.message.text
        cursor.execute("SELECT user_id FROM media WHERE id = ?", (media_id,))
        media = cursor.fetchone()

        if media:
            user_id = media[0]

            # Atualizar o banco de dados com o motivo
            cursor.execute("UPDATE media SET status = 'rejected', rejection_reason = ? WHERE id = ?", (motivo, media_id))
            conn.commit()

            # Informar o administrador
            await update.message.reply_text("‚ùå Rejei√ß√£o registrada e enviada ao usu√°rio.")

            # Notificar o usu√°rio
            await context.bot.send_message(
                user_id,
                f"‚ùå Sua m√≠dia foi reprovada.\n\nüìã *Motivo:* {motivo}\n\n‚ö†Ô∏è *Envio An√¥nimo: Ningu√©m sabe quem enviou.*",
                parse_mode="Markdown",
            )

            # Limpar o contexto
            del context.user_data["awaiting_reason"]
        else:
            await update.message.reply_text("‚ö†Ô∏è M√≠dia n√£o encontrada para registrar o motivo.")
    else:
        await update.message.reply_text("‚ö†Ô∏è N√£o h√° nenhuma reprova√ß√£o pendente.")

# Configura√ß√£o principal
def main():
    print("Inicializando o bot...")
    application = Application.builder().token("7702255202:AAHcxWp63HOFJgJpkYEtiGxHmFvx08nBpmY").build()

    # Handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO, receber_midia))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receber_motivo_reprovacao))
    application.add_handler(CallbackQueryHandler(callback_query_handler))

    # Iniciar bot
    application.run_polling()

if __name__ == "__main__":
    main()
